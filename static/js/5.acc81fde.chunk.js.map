{"version":3,"sources":["components/ContactList/ContactList.module.css","components/ContactLIstItem/ContactListItem.module.css","components/Filter/Filter.module.css","components/ContactForm/ContactForm.module.css","components/ContactLIstItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/ContactForm/ContactForm.jsx","Views/ContactsView.jsx"],"names":["module","exports","connect","dispatch","onDeleteContact","contactId","deleteContact","contacts","isDeleting","className","s","item","contact","list","name","number","Button","variant","type","onClick","id","disabled","color","height","width","state","contactsSelector","getVisibleContacts","map","Filter","filter","useSelector","getFilter","useDispatch","container","label","input","placeholder","pattern","title","value","onChange","event","changeFilter","target","ContactForm","useState","setName","setNumber","getContacts","form","onSubmit","e","preventDefault","find","toLowerCase","toast","warning","contactsOperation","addContact","required","currentTarget","transition","Zoom","autoClose","barStyles","display","alignItems","marginBottom","ContactsView","params","isLoadingContact","getLoading","useEffect","fetchContacts","Container","style"],"mappings":"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","file":"static/js/5.acc81fde.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"ContactList_listItem__3oLTS\",\"list\":\"ContactList_list__3QSsp\",\"btn\":\"ContactList_btn__3vsnO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactListItem_item__1jodd\",\"list\":\"ContactListItem_list__2hVHO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__1EfUD\",\"input\":\"Filter_input__1lohZ\",\"container\":\"Filter_container__9CH0C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2aR2r\",\"input\":\"ContactForm_input__35xBy\",\"label\":\"ContactForm_label__1JWgg\"};","import React from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport {deleteContact} from '../../redux/phonebook/phonebook-operations'\r\nimport s from './ContactListItem.module.css';\r\nimport Loader from 'react-loader-spinner';\r\nimport Button from '@mui/material/Button';\r\n\r\n\r\nconst ContactListItem = ({contacts, onDeleteContact ,isDeleting }) => (\r\n    <div className={s.item}>\r\n        <p className={s.contact}>\r\n            <span className={s.list}>{contacts.name}:\r\n            </span>\r\n            <span className={s.list}>{contacts.number}\r\n            </span>\r\n        </p>\r\n    <Button variant=\"contained\"  type=\"button\"  onClick={() => onDeleteContact(contacts.id)} disabled={isDeleting}>\r\n      {isDeleting ?( <Loader\r\n                                type=\"ThreeDots\"\r\n                                color=\"#000000\"\r\n                                height={15}\r\n                                width={15}\r\n                            />):'Delete'} </Button>\r\n    </div> \r\n)\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onDeleteContact: (contactId) => dispatch(deleteContact(contactId)),\r\n  }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactListItem);\r\n{/* <li className={s.listItem} key={id}>\r\n            {`${name}: ${number}`}\r\n            <button className={s.btn}\r\n                type=\"button\" onClick={() => deleteContact(id)} disabled={isDeleting}>\r\n                {isDeleting ?( <Loader\r\n                                type=\"ThreeDots\"\r\n                                color=\"#000000\"\r\n                                height={15}\r\n                                width={15}\r\n                            />):'Delete'} </button>\r\n        </li> */}","\r\nimport s from './ContactList.module.css'\r\nimport { contactsSelector } from \"../../redux/phonebook\";\r\nimport { connect } from 'react-redux';\r\nimport ContactListItem from '../ContactLIstItem/ContactListItem';\r\n\r\n\r\nconst ContactList = ({contacts}) => (\r\n    <ul className={s.list}>\r\n        {contacts.map((contacts)=> (\r\n            <li key={contacts.id}  >\r\n                <ContactListItem contacts={contacts}/>\r\n            </li>\r\n        ))}\r\n    </ul>\r\n)\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        contacts: contactsSelector.getVisibleContacts(state)\r\n    }\r\n  }\r\n\r\nexport default connect(mapStateToProps, null)(ContactList);\r\n","import s from \"./Filter.module.css\";\r\nimport { contactsSelector } from \"../../redux/phonebook\";\r\nimport { useDispatch,useSelector } from \"react-redux\";\r\nimport {changeFilter} from '../../redux/phonebook/phonebook-actions'\r\nexport default function Filter() {\r\n  const filter = useSelector(contactsSelector.getFilter);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div className={s.container}>\r\n    <label className={s.label}>\r\n      Filter\r\n      <input\r\n        className={s.input}\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        placeholder=\"Enter some letters to search\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        value={filter}\r\n        onChange={event => dispatch(changeFilter(event.target.value))}\r\n      ></input>\r\n    </label>\r\n    </div>\r\n  );\r\n}","\r\nimport { useState } from \"react\";\r\nimport { useDispatch,useSelector } from \"react-redux\";\r\nimport s from './ContactForm.module.css';\r\nimport { toast, ToastContainer, Zoom } from 'react-toastify';\r\nimport { contactsSelector } from \"../../redux/phonebook\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport Button from '@mui/material/Button';\r\n// import { connect } from \"react-redux\";\r\nimport {contactsOperation} from '../../redux/phonebook'\r\n\r\n\r\nexport default function ContactForm() {\r\n    const [name, setName] = useState('');\r\n    const [number, setNumber] = useState('');\r\n    const dispatch = useDispatch()\r\n    const contacts= useSelector(contactsSelector.getContacts)\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const duplicateContact = contacts.find(\r\n    (contact) => contact.name.toLowerCase() === name.toLowerCase()\r\n    );\r\n    if (duplicateContact) {\r\n    toast.warning('Contact is already added !!!');\r\n    return;\r\n    }\r\n        \r\n        dispatch(contactsOperation.addContact(name, number));\r\n        setName('');\r\n        setNumber('');\r\n        \r\n    };\r\n\r\n    return (\r\n        <>\r\n        <form className={s.form} onSubmit={handleSubmit}>\r\n            <label className={s.label}>\r\n                Name\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                    required\r\n                    onChange={e=>setName(e.currentTarget.value)}\r\n                    value={name}\r\n                    className={s.input} />\r\n            </label>\r\n            <label className={s.label}>\r\n                Number\r\n                <input\r\n                    type=\"tel\"\r\n                    name=\"number\"\r\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                    required\r\n                    onChange={e=>setNumber(e.currentTarget.value)}\r\n                    value={number}\r\n                    className={s.input} />\r\n            </label>\r\n            <Button variant=\"contained\"   type=\"submit\">Add contact</Button>\r\n        </form>\r\n            <ToastContainer transition={Zoom} autoClose={3000} />\r\n            </>\r\n    )\r\n}\r\n// const mapStateToProps = state => {\r\n//     return {\r\n//         contacts: contactsSelector.getContacts(state)\r\n//     }\r\n// }\r\n\r\n// const mapDispatchToProps = dispatch => {\r\n   \r\n//   return {\r\n//     onAddContact: ({name, number}) => dispatch(addContact({name, number})),\r\n//   }\r\n// }\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Container from '../components/Conteiner';\r\nimport ContactList from '../components/ContactList';\r\nimport Filter from '../components/Filter';\r\nimport ContactForm from '../components/ContactForm';\r\nimport { contactsOperation, contactsSelector } from '../redux/phonebook';\r\nconst barStyles = {\r\n  display: 'flex',\r\n  alignItems: 'flex-end',\r\n  marginBottom: 20,\r\n};\r\n\r\nexport default function ContactsView(params) {\r\n  const dispatch = useDispatch();\r\n  const isLoadingContact = useSelector(contactsSelector.getLoading);\r\n\r\n  // const [isModalOpen, setIsModalOpen] = useState(false);\r\n  // const toggleModal = () => setIsModalOpen(state => !state);\r\n\r\n  useEffect(() => dispatch(contactsOperation.fetchContacts()), [dispatch]);\r\n\r\n  return (\r\n    <Container>\r\n      <div style={barStyles}>\r\n\r\n        {isLoadingContact && <h1>Загружаем...</h1>}\r\n      </div>\r\n      <ContactForm />\r\n      <Filter />\r\n        <ContactList />\r\n    </Container>\r\n  );\r\n}"],"sourceRoot":""}